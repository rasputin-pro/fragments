name: Fragments workflow

on:
  pull_request:
    branches:
      - main
jobs:
  copy_files_to_server:
    name: Copy infra folder
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Delete old files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo rm -rf /home/${{ secrets.USER }}/fragments/
            mkdir -p /home/${{ secrets.USER }}/fragments/
      - name: Copy infra files
        uses: garygrossgarten/github-action-scp@release
        with:
          local: infra/
          remote: /home/${{ secrets.USER }}/fragments/
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          privateKey: ${{ secrets.SSH_KEY }}

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fragments:latest
          context: yatube/
  deploy:
    runs-on: ubuntu-latest
    needs: [
      build_and_push_to_docker_hub,
      copy_files_to_server
    ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/${{ secrets.USER }}/fragments/
            sudo docker compose down
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fragments:latest
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo chmod ugo+x init-letsencrypt.sh
            yes | ./init-letsencrypt.sh
            sudo docker compose up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
